8e8399bdcfd54b653d903d19f290d16d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _reactApollo = require("react-apollo");

var _apolloBoost = _interopRequireDefault(require("apollo-boost"));

var _env = _interopRequireDefault(require("../../../env"));

require("node-fetch");

var _apolloLinkHttp = require("apollo-link-http");

var _ErrorBoundary = _interopRequireDefault(require("../../../utils/ErrorBoundary"));

var _ReservationsScheduler = _interopRequireDefault(require("../ReservationsScheduler"));

var link = (0, _apolloLinkHttp.createHttpLink)({
  uri: _env.default.graphqlURL,
  fetch: fetch
});
var client = new _apolloBoost.default({
  uri: _env.default.graphqlURL
});
describe('<ReservationsScheduler />', function () {
  var wrapper;
  var closeModal = jest.fn();
  var props = {
    closeModal: closeModal
  };
  beforeEach(function () {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ErrorBoundary.default, null, _react.default.createElement(_ReservationsScheduler.default, props)));
  });
  it('renders correctly', function () {
    var tree = _reactTestRenderer.default.create(_react.default.createElement(_ErrorBoundary.default, null, _react.default.createElement(_reactApollo.ApolloProvider, {
      client: client
    }, _react.default.createElement(_ReservationsScheduler.default, null)))).toJSON();

    expect(tree).toMatchSnapshot();
    console.log(wrapper);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlc2VydmF0aW9uc1NjaGVkdWxlci50ZXN0LmpzIl0sIm5hbWVzIjpbImxpbmsiLCJ1cmkiLCJlbnYiLCJncmFwaHFsVVJMIiwiZmV0Y2giLCJjbGllbnQiLCJBcG9sbG9DbGllbnQiLCJkZXNjcmliZSIsIndyYXBwZXIiLCJjbG9zZU1vZGFsIiwiamVzdCIsImZuIiwicHJvcHMiLCJiZWZvcmVFYWNoIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBRUE7O0FBSkEsSUFBTUEsSUFBSSxHQUFHLG9DQUFlO0FBQUVDLEVBQUFBLEdBQUcsRUFBRUMsYUFBSUMsVUFBWDtBQUF1QkMsRUFBQUEsS0FBSyxFQUFFQTtBQUE5QixDQUFmLENBQWI7QUFNQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsb0JBQUosQ0FBaUI7QUFDOUJMLEVBQUFBLEdBQUcsRUFBRUMsYUFBSUM7QUFEcUIsQ0FBakIsQ0FBZjtBQUlBSSxRQUFRLENBQUMsMkJBQUQsRUFBOEIsWUFBTTtBQUMxQyxNQUFJQyxPQUFKO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBbkI7QUFDQSxNQUFJQyxLQUFLLEdBQUc7QUFDVkgsSUFBQUEsVUFBVSxFQUFWQTtBQURVLEdBQVo7QUFJQUksRUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZkwsSUFBQUEsT0FBTyxHQUFHLHFCQUNSLDZCQUFDLHNCQUFELFFBQ0UsNkJBQUMsOEJBQUQsRUFBMkJJLEtBQTNCLENBREYsQ0FEUSxDQUFWO0FBS0QsR0FOUyxDQUFWO0FBU0FFLEVBQUFBLEVBQUUsQ0FBQyxtQkFBRCxFQUFzQixZQUFNO0FBQzVCLFFBQU1DLElBQUksR0FBR0MsMkJBQVNDLE1BQVQsQ0FDWCw2QkFBQyxzQkFBRCxRQUNFLDZCQUFDLDJCQUFEO0FBQWdCLE1BQUEsTUFBTSxFQUFFWjtBQUF4QixPQUNFLDZCQUFDLDhCQUFELE9BREYsQ0FERixDQURXLEVBTVhhLE1BTlcsRUFBYjs7QUFPQUMsSUFBQUEsTUFBTSxDQUFDSixJQUFELENBQU4sQ0FBYUssZUFBYjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWQsT0FBWjtBQUNELEdBVkMsQ0FBRjtBQVdELENBM0JPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEVuenltZSwgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbi8vIGltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE1JztcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IHsgQXBvbGxvUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1hcG9sbG8nO1xuaW1wb3J0IEFwb2xsb0NsaWVudCBmcm9tICdhcG9sbG8tYm9vc3QnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9lbnYnO1xuaW1wb3J0ICdub2RlLWZldGNoJztcbmltcG9ydCB7IGNyZWF0ZUh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG5cbmNvbnN0IGxpbmsgPSBjcmVhdGVIdHRwTGluayh7IHVyaTogZW52LmdyYXBocWxVUkwsIGZldGNoOiBmZXRjaCB9KTtcblxuaW1wb3J0IEVycm9yQm91bmRhcnkgZnJvbSAnLi4vLi4vLi4vdXRpbHMvRXJyb3JCb3VuZGFyeSc7XG5cbmltcG9ydCBSZXNlcnZhdGlvbnNTY2hlZHVsZXIgZnJvbSAnLi4vUmVzZXJ2YXRpb25zU2NoZWR1bGVyJztcblxuY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gIHVyaTogZW52LmdyYXBocWxVUkwsXG59KTtcblxuZGVzY3JpYmUoJzxSZXNlcnZhdGlvbnNTY2hlZHVsZXIgLz4nLCAoKSA9PiB7XG4gIGxldCB3cmFwcGVyO1xuICBjb25zdCBjbG9zZU1vZGFsID0gamVzdC5mbigpO1xuICBsZXQgcHJvcHMgPSB7XG4gICAgY2xvc2VNb2RhbFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHdyYXBwZXIgPSBzaGFsbG93KFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxSZXNlcnZhdGlvbnNTY2hlZHVsZXIgey4uLnByb3BzfSAvPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIClcbiAgfSk7XG5cbiAgXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxBcG9sbG9Qcm92aWRlciBjbGllbnQ9e2NsaWVudH0+XG4gICAgICAgICAgPFJlc2VydmF0aW9uc1NjaGVkdWxlciAvPlxuICAgICAgICA8L0Fwb2xsb1Byb3ZpZGVyPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICkudG9KU09OKCk7XG4gICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIGNvbnNvbGUubG9nKHdyYXBwZXIpO1xuICB9KTtcbn0pO1xuIl19