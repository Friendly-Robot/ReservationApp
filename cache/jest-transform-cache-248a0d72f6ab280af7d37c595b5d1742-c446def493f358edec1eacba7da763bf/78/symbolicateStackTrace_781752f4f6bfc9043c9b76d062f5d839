8e648d8283bd38d9ca070abf94127821
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var getDevServer = require('getDevServer');

var _require = require('NativeModules'),
    SourceCode = _require.SourceCode;

var fetch;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, foundInternalSource, response, json;
  return _regenerator.default.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require('fetch').fetch;
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;

          if (SourceCode.scriptURL) {
            foundInternalSource = false;
            stackCopy = stack.map(function (frame) {
              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return (0, _objectSpread2.default)({}, frame, {
                  file: SourceCode.scriptURL
                });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 8;
          return _regenerator.default.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({
              stack: stackCopy
            })
          }));

        case 8:
          response = _context.sent;
          _context.next = 11;
          return _regenerator.default.awrap(response.json());

        case 11:
          json = _context.sent;
          return _context.abrupt("return", json.stack);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  });
}

module.exports = symbolicateStackTrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bWJvbGljYXRlU3RhY2tUcmFjZS5qcyJdLCJuYW1lcyI6WyJnZXREZXZTZXJ2ZXIiLCJyZXF1aXJlIiwiU291cmNlQ29kZSIsImZldGNoIiwiaXNTb3VyY2VkRnJvbURpc2siLCJzb3VyY2VQYXRoIiwidGVzdCIsInN5bWJvbGljYXRlU3RhY2tUcmFjZSIsInN0YWNrIiwiZ2xvYmFsIiwiZGV2U2VydmVyIiwiYnVuZGxlTG9hZGVkRnJvbVNlcnZlciIsIkVycm9yIiwic3RhY2tDb3B5Iiwic2NyaXB0VVJMIiwiZm91bmRJbnRlcm5hbFNvdXJjZSIsIm1hcCIsImZyYW1lIiwiZmlsZSIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJqc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBRUEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7ZUFFcUJBLE9BQU8sQ0FBQyxlQUFELEM7SUFBckJDLFUsWUFBQUEsVTs7QUFHUCxJQUFJQyxLQUFKOztBQUlBLFNBQVNDLGlCQUFULENBQTJCQyxVQUEzQixFQUF3RDtBQUN0RCxTQUFPLENBQUMsUUFBUUMsSUFBUixDQUFhRCxVQUFiLENBQUQsSUFBNkIsUUFBUUMsSUFBUixDQUFhRCxVQUFiLENBQXBDO0FBQ0Q7O0FBRUQsU0FBZUUscUJBQWYsQ0FDRUMsS0FERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjRSxjQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNWQSxZQUFBQSxLQUFLLEdBQUdNLE1BQU0sQ0FBQ04sS0FBUCxJQUFnQkYsT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFpQkUsS0FBekM7QUFDRDs7QUFFS08sVUFBQUEsU0FsQlIsR0FrQm9CVixZQUFZLEVBbEJoQzs7QUFBQSxjQW1CT1UsU0FBUyxDQUFDQyxzQkFuQmpCO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQW9CVSxJQUFJQyxLQUFKLENBQVUseUNBQVYsQ0FwQlY7O0FBQUE7QUF1Qk1DLFVBQUFBLFNBdkJOLEdBdUJrQkwsS0F2QmxCOztBQXlCRSxjQUFJTixVQUFVLENBQUNZLFNBQWYsRUFBMEI7QUFDcEJDLFlBQUFBLG1CQURvQixHQUNXLEtBRFg7QUFFeEJGLFlBQUFBLFNBQVMsR0FBR0wsS0FBSyxDQUFDUSxHQUFOLENBQVUsVUFBQ0MsS0FBRCxFQUF1QjtBQUszQyxrQkFBSSxDQUFDRixtQkFBRCxJQUF3QlgsaUJBQWlCLENBQUNhLEtBQUssQ0FBQ0MsSUFBUCxDQUE3QyxFQUEyRDtBQUV6RCx1REFBV0QsS0FBWDtBQUFrQkMsa0JBQUFBLElBQUksRUFBRWhCLFVBQVUsQ0FBQ1k7QUFBbkM7QUFDRDs7QUFFREMsY0FBQUEsbUJBQW1CLEdBQUcsSUFBdEI7QUFDQSxxQkFBT0UsS0FBUDtBQUNELGFBWlcsQ0FBWjtBQWFEOztBQXhDSDtBQUFBLDRDQTBDeUJkLEtBQUssQ0FBQ08sU0FBUyxDQUFDUyxHQUFWLEdBQWdCLGFBQWpCLEVBQWdDO0FBQzFEQyxZQUFBQSxNQUFNLEVBQUUsTUFEa0Q7QUFFMURDLFlBQUFBLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWU7QUFBQ2YsY0FBQUEsS0FBSyxFQUFFSztBQUFSLGFBQWY7QUFGb0QsV0FBaEMsQ0ExQzlCOztBQUFBO0FBMENRVyxVQUFBQSxRQTFDUjtBQUFBO0FBQUEsNENBOENxQkEsUUFBUSxDQUFDQyxJQUFULEVBOUNyQjs7QUFBQTtBQThDUUEsVUFBQUEsSUE5Q1I7QUFBQSwyQ0ErQ1NBLElBQUksQ0FBQ2pCLEtBL0NkOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWtEQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLHFCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdldERldlNlcnZlciA9IHJlcXVpcmUoJ2dldERldlNlcnZlcicpO1xuXG5jb25zdCB7U291cmNlQ29kZX0gPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG5cbi8vIEF2b2lkIHJlcXVpcmluZyBmZXRjaCBvbiBsb2FkIG9mIHRoaXMgbW9kdWxlOyBzZWUgc3ltYm9saWNhdGVTdGFja1RyYWNlXG5sZXQgZmV0Y2g7XG5cbmltcG9ydCB0eXBlIHtTdGFja0ZyYW1lfSBmcm9tICdwYXJzZUVycm9yU3RhY2snO1xuXG5mdW5jdGlvbiBpc1NvdXJjZWRGcm9tRGlzayhzb3VyY2VQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEvXmh0dHAvLnRlc3Qoc291cmNlUGF0aCkgJiYgL1tcXFxcL10vLnRlc3Qoc291cmNlUGF0aCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN5bWJvbGljYXRlU3RhY2tUcmFjZShcbiAgc3RhY2s6IEFycmF5PFN0YWNrRnJhbWU+LFxuKTogUHJvbWlzZTxBcnJheTxTdGFja0ZyYW1lPj4ge1xuICAvLyBSTiBjdXJyZW50bHkgbGF6eSBsb2FkcyB3aGF0d2ctZmV0Y2ggdXNpbmcgYSBjdXN0b20gZmV0Y2ggbW9kdWxlLCB3aGljaCxcbiAgLy8gd2hlbiBjYWxsZWQgZm9yIHRoZSBmaXJzdCB0aW1lLCByZXF1aXJlcyBhbmQgcmUtZXhwb3J0cyAnd2hhdHdnLWZldGNoJy5cbiAgLy8gSG93ZXZlciwgd2hlbiBhIGRlcGVuZGVuY3kgb2YgdGhlIHByb2plY3QgdHJpZXMgdG8gcmVxdWlyZSB3aGF0d2ctZmV0Y2hcbiAgLy8gZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHksIHdoYXR3Zy1mZXRjaCBpcyByZXF1aXJlZCBiZWZvcmVcbiAgLy8gUk4gY2FuIGxhenkgbG9hZCB3aGF0d2ctZmV0Y2guIEFzIHdoYXR3Zy1mZXRjaCBjaGVja3NcbiAgLy8gZm9yIGEgZmV0Y2ggcG9seWZpbGwgYmVmb3JlIGxvYWRpbmcsIGl0IHdpbGwgaW4gdHVybiB0cnkgdG8gbG9hZFxuICAvLyBSTidzIGZldGNoIG1vZHVsZSwgd2hpY2ggaW1tZWRpYXRlbHkgdHJpZXMgdG8gaW1wb3J0IHdoYXR3Zy1mZXRjaCBBR0FJTi5cbiAgLy8gVGhpcyBjYXVzZXMgYSBjaXJjdWxhciByZXF1aXJlIHdoaWNoIHJlc3VsdHMgaW4gUk4ncyBmZXRjaCBtb2R1bGVcbiAgLy8gZXhwb3J0aW5nIGZldGNoIGFzICd1bmRlZmluZWQnLlxuICAvLyBUaGUgZml4IGJlbG93IHBvc3Rwb25lcyB0cnlpbmcgdG8gbG9hZCBmZXRjaCB1bnRpbCB0aGUgZmlyc3QgY2FsbCB0byBzeW1ib2xpY2F0ZVN0YWNrVHJhY2UuXG4gIC8vIEF0IHRoYXQgdGltZSwgd2Ugd2lsbCBoYXZlIGVpdGhlciBnbG9iYWwuZmV0Y2ggKHdoYXR3Zy1mZXRjaCkgb3IgUk4ncyBmZXRjaC5cbiAgaWYgKCFmZXRjaCkge1xuICAgIGZldGNoID0gZ2xvYmFsLmZldGNoIHx8IHJlcXVpcmUoJ2ZldGNoJykuZmV0Y2g7XG4gIH1cblxuICBjb25zdCBkZXZTZXJ2ZXIgPSBnZXREZXZTZXJ2ZXIoKTtcbiAgaWYgKCFkZXZTZXJ2ZXIuYnVuZGxlTG9hZGVkRnJvbVNlcnZlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVuZGxlIHdhcyBub3QgbG9hZGVkIGZyb20gdGhlIHBhY2thZ2VyJyk7XG4gIH1cblxuICBsZXQgc3RhY2tDb3B5ID0gc3RhY2s7XG5cbiAgaWYgKFNvdXJjZUNvZGUuc2NyaXB0VVJMKSB7XG4gICAgbGV0IGZvdW5kSW50ZXJuYWxTb3VyY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGFja0NvcHkgPSBzdGFjay5tYXAoKGZyYW1lOiBTdGFja0ZyYW1lKSA9PiB7XG4gICAgICAvLyBJZiB0aGUgc291cmNlcyBleGlzdCBvbiBkaXNrIHJhdGhlciB0aGFuIGFwcGVhcmluZyB0byBjb21lIGZyb20gdGhlIHBhY2thZ2VyLFxuICAgICAgLy8gcmVwbGFjZSB0aGUgbG9jYXRpb24gd2l0aCB0aGUgcGFja2FnZXIgVVJMIHVudGlsIHdlIHJlYWNoIGFuIGludGVybmFsIHNvdXJjZVxuICAgICAgLy8gd2hpY2ggZG9lcyBub3QgaGF2ZSBhIHBhdGggKG5vIHNsYXNoZXMpLCBpbmRpY2F0aW5nIGEgc3dpdGNoIGZyb20gd2l0aGluXG4gICAgICAvLyB0aGUgYXBwbGljYXRpb24gdG8gYSBzdXJyb3VuZGluZyBkZWJ1Z2dpbmcgZW52aXJvbm1lbnQuXG4gICAgICBpZiAoIWZvdW5kSW50ZXJuYWxTb3VyY2UgJiYgaXNTb3VyY2VkRnJvbURpc2soZnJhbWUuZmlsZSkpIHtcbiAgICAgICAgLy8gQ29weSBmcmFtZSBpbnRvIG5ldyBvYmplY3QgYW5kIHJlcGxhY2UgJ2ZpbGUnIHByb3BlcnR5XG4gICAgICAgIHJldHVybiB7Li4uZnJhbWUsIGZpbGU6IFNvdXJjZUNvZGUuc2NyaXB0VVJMfTtcbiAgICAgIH1cblxuICAgICAgZm91bmRJbnRlcm5hbFNvdXJjZSA9IHRydWU7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGRldlNlcnZlci51cmwgKyAnc3ltYm9saWNhdGUnLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe3N0YWNrOiBzdGFja0NvcHl9KSxcbiAgfSk7XG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiBqc29uLnN0YWNrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN5bWJvbGljYXRlU3RhY2tUcmFjZTtcbiJdfQ==