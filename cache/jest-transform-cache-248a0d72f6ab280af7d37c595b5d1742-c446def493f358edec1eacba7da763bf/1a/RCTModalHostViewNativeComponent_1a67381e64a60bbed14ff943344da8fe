55b1cb96ab223013524b371981cd6321
'use strict';

var requireNativeComponent = require('requireNativeComponent');

module.exports = requireNativeComponent('RCTModalHostView');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVE1vZGFsSG9zdFZpZXdOYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLHdCQUFELENBQXRDOztBQW9IQUMsTUFBTSxDQUFDQyxPQUFQLEdBQW1CSCxzQkFBc0IsQ0FDdkMsa0JBRHVDLENBQXpDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJ3JlcXVpcmVOYXRpdmVDb21wb25lbnQnKTtcblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7U3ludGhldGljRXZlbnR9IGZyb20gJ0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB0eXBlIHtOYXRpdmVDb21wb25lbnR9IGZyb20gJ1JlYWN0TmF0aXZlJztcblxudHlwZSBPcmllbnRhdGlvbkNoYW5nZUV2ZW50ID0gU3ludGhldGljRXZlbnQ8XG4gICRSZWFkT25seTx7fFxuICAgIG9yaWVudGF0aW9uOiAncG9ydHJhaXQnIHwgJ2xhbmRzY2FwZScsXG4gIHx9Pixcbj47XG5cbnR5cGUgTW9kYWxOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG5cbiAgLyoqXG4gICAqIFRoZSBgYW5pbWF0aW9uVHlwZWAgcHJvcCBjb250cm9scyBob3cgdGhlIG1vZGFsIGFuaW1hdGVzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvbW9kYWwuaHRtbCNhbmltYXRpb250eXBlXG4gICAqL1xuICBhbmltYXRpb25UeXBlPzogPygnbm9uZScgfCAnc2xpZGUnIHwgJ2ZhZGUnKSxcblxuICAvKipcbiAgICogVGhlIGBwcmVzZW50YXRpb25TdHlsZWAgcHJvcCBjb250cm9scyBob3cgdGhlIG1vZGFsIGFwcGVhcnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9tb2RhbC5odG1sI3ByZXNlbnRhdGlvbnN0eWxlXG4gICAqL1xuICBwcmVzZW50YXRpb25TdHlsZT86ID8oXG4gICAgfCAnZnVsbFNjcmVlbidcbiAgICB8ICdwYWdlU2hlZXQnXG4gICAgfCAnZm9ybVNoZWV0J1xuICAgIHwgJ292ZXJGdWxsU2NyZWVuJ1xuICApLFxuXG4gIC8qKlxuICAgKiBUaGUgYHRyYW5zcGFyZW50YCBwcm9wIGRldGVybWluZXMgd2hldGhlciB5b3VyIG1vZGFsIHdpbGwgZmlsbCB0aGVcbiAgICogZW50aXJlIHZpZXcuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9tb2RhbC5odG1sI3RyYW5zcGFyZW50XG4gICAqL1xuICB0cmFuc3BhcmVudD86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBUaGUgYGhhcmR3YXJlQWNjZWxlcmF0ZWRgIHByb3AgY29udHJvbHMgd2hldGhlciB0byBmb3JjZSBoYXJkd2FyZVxuICAgKiBhY2NlbGVyYXRpb24gZm9yIHRoZSB1bmRlcmx5aW5nIHdpbmRvdy5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL21vZGFsLmh0bWwjaGFyZHdhcmVhY2NlbGVyYXRlZFxuICAgKi9cbiAgaGFyZHdhcmVBY2NlbGVyYXRlZD86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBUaGUgYHZpc2libGVgIHByb3AgZGV0ZXJtaW5lcyB3aGV0aGVyIHlvdXIgbW9kYWwgaXMgdmlzaWJsZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL21vZGFsLmh0bWwjdmlzaWJsZVxuICAgKi9cbiAgdmlzaWJsZT86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBUaGUgYG9uUmVxdWVzdENsb3NlYCBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgdXNlciB0YXBzIHRoZSBoYXJkd2FyZVxuICAgKiBiYWNrIGJ1dHRvbiBvbiBBbmRyb2lkIG9yIHRoZSBtZW51IGJ1dHRvbiBvbiBBcHBsZSBUVi5cbiAgICpcbiAgICogVGhpcyBpcyByZXF1aXJlZCBvbiBBcHBsZSBUViBhbmQgQW5kcm9pZC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL21vZGFsLmh0bWwjb25yZXF1ZXN0Y2xvc2VcbiAgICovXG4gIG9uUmVxdWVzdENsb3NlPzogPyhldmVudD86IFN5bnRoZXRpY0V2ZW50PG51bGw+KSA9PiBtaXhlZCxcblxuICAvKipcbiAgICogVGhlIGBvblNob3dgIHByb3AgYWxsb3dzIHBhc3NpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgdGhlXG4gICAqIG1vZGFsIGhhcyBiZWVuIHNob3duLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvbW9kYWwuaHRtbCNvbnNob3dcbiAgICovXG4gIG9uU2hvdz86ID8oZXZlbnQ/OiBTeW50aGV0aWNFdmVudDxudWxsPikgPT4gbWl4ZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBgb25EaXNtaXNzYCBwcm9wIGFsbG93cyBwYXNzaW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlXG4gICAqIHRoZSBtb2RhbCBoYXMgYmVlbiBkaXNtaXNzZWQuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9tb2RhbC5odG1sI29uZGlzbWlzc1xuICAgKi9cbiAgb25EaXNtaXNzPzogPygpID0+IG1peGVkLFxuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkLiBVc2UgdGhlIGBhbmltYXRpb25UeXBlYCBwcm9wIGluc3RlYWQuXG4gICAqL1xuICBhbmltYXRlZD86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBUaGUgYHN1cHBvcnRlZE9yaWVudGF0aW9uc2AgcHJvcCBhbGxvd3MgdGhlIG1vZGFsIHRvIGJlIHJvdGF0ZWQgdG8gYW55IG9mIHRoZSBzcGVjaWZpZWQgb3JpZW50YXRpb25zLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvbW9kYWwuaHRtbCNzdXBwb3J0ZWRvcmllbnRhdGlvbnNcbiAgICovXG4gIHN1cHBvcnRlZE9yaWVudGF0aW9ucz86ID8kUmVhZE9ubHlBcnJheTxcbiAgICB8ICdwb3J0cmFpdCdcbiAgICB8ICdwb3J0cmFpdC11cHNpZGUtZG93bidcbiAgICB8ICdsYW5kc2NhcGUnXG4gICAgfCAnbGFuZHNjYXBlLWxlZnQnXG4gICAgfCAnbGFuZHNjYXBlLXJpZ2h0JyxcbiAgPixcblxuICAvKipcbiAgICogVGhlIGBvbk9yaWVudGF0aW9uQ2hhbmdlYCBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgb3JpZW50YXRpb24gY2hhbmdlcyB3aGlsZSB0aGUgbW9kYWwgaXMgYmVpbmcgZGlzcGxheWVkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvbW9kYWwuaHRtbCNvbm9yaWVudGF0aW9uY2hhbmdlXG4gICAqL1xuICBvbk9yaWVudGF0aW9uQ2hhbmdlPzogPyhldmVudDogT3JpZW50YXRpb25DaGFuZ2VFdmVudCkgPT4gbWl4ZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBgaWRlbnRpZmllcmAgaXMgdGhlIHVuaXF1ZSBudW1iZXIgZm9yIGlkZW50aWZ5aW5nIE1vZGFsIGNvbXBvbmVudHMuXG4gICAqL1xuICBpZGVudGlmaWVyPzogP251bWJlcixcbnx9PjtcblxudHlwZSBSQ1RNb2RhbEhvc3RWaWV3TmF0aXZlVHlwZSA9IENsYXNzPE5hdGl2ZUNvbXBvbmVudDxNb2RhbE5hdGl2ZVByb3BzPj47XG5cbm1vZHVsZS5leHBvcnRzID0gKChyZXF1aXJlTmF0aXZlQ29tcG9uZW50KFxuICAnUkNUTW9kYWxIb3N0VmlldycsXG4pOiBhbnkpOiBSQ1RNb2RhbEhvc3RWaWV3TmF0aXZlVHlwZSk7XG4iXX0=