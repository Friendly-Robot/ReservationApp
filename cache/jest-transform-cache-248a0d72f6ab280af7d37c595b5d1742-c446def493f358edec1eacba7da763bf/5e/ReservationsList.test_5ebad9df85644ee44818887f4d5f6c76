e0d822525f712f411a27b02f13a3ed29
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _jestMock = _interopRequireDefault(require("jest-mock"));

var _ReservationsList = _interopRequireDefault(require("../ReservationsList"));

var _ReservationsListItem = _interopRequireDefault(require("../ReservationsListItem"));

var _ButtonActionRound = _interopRequireDefault(require("../../../common/ButtonActionRound"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

describe('<ReservationsList />', function () {
  var wrapper;
  var props;
  beforeEach(function () {
    props = {
      hotels: [[{
        hotelName: 'test',
        __typename: 'Reservation',
        id: '123456',
        name: 'Andy',
        arrivalDate: '04/22/2020',
        departureDate: '04/22/9999'
      }]],
      setShowScheduler: _jestMock.default.fn()
    };
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ReservationsList.default, props));
  });
  it('should be defined', function () {
    expect(wrapper.find(_ReservationsList.default).toBeDefined());
  });
  it('renders correctly', function () {
    var tree = _reactTestRenderer.default.create(_react.default.createElement(_ReservationsList.default, null)).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('renders ReservationsListItem', function () {
    expect(wrapper.find(_ReservationsListItem.default)).toBeDefined();
  });
  it('renders a ButtonAction to allow opening ReservationsScheduler', function () {
    expect(wrapper.find(_ButtonActionRound.default).toBeDefined());
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlc2VydmF0aW9uc0xpc3QudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIndyYXBwZXIiLCJwcm9wcyIsImJlZm9yZUVhY2giLCJob3RlbHMiLCJob3RlbE5hbWUiLCJfX3R5cGVuYW1lIiwiaWQiLCJuYW1lIiwiYXJyaXZhbERhdGUiLCJkZXBhcnR1cmVEYXRlIiwic2V0U2hvd1NjaGVkdWxlciIsImplc3QiLCJmbiIsIml0IiwiZXhwZWN0IiwiZmluZCIsIlJlc2VydmF0aW9uc0xpc3QiLCJ0b0JlRGVmaW5lZCIsInRyZWUiLCJyZW5kZXJlciIsImNyZWF0ZSIsInRvSlNPTiIsInRvTWF0Y2hTbmFwc2hvdCIsIlJlc2VydmF0aW9uc0xpc3RJdGVtIiwiQnV0dG9uQWN0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUdBOztBQUVBQSxRQUFRLENBQUMsc0JBQUQsRUFBeUIsWUFBTTtBQUNyQyxNQUFJQyxPQUFKO0FBQ0EsTUFBSUMsS0FBSjtBQUVBQyxFQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmRCxJQUFBQSxLQUFLLEdBQUc7QUFDTkUsTUFBQUEsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNSQyxRQUFBQSxTQUFTLEVBQUUsTUFESDtBQUVSQyxRQUFBQSxVQUFVLEVBQUUsYUFGSjtBQUdSQyxRQUFBQSxFQUFFLEVBQUUsUUFISTtBQUlSQyxRQUFBQSxJQUFJLEVBQUUsTUFKRTtBQUtSQyxRQUFBQSxXQUFXLEVBQUUsWUFMTDtBQU1SQyxRQUFBQSxhQUFhLEVBQUU7QUFOUCxPQUFELENBQUQsQ0FERjtBQVNOQyxNQUFBQSxnQkFBZ0IsRUFBRUMsa0JBQUtDLEVBQUw7QUFUWixLQUFSO0FBWUFaLElBQUFBLE9BQU8sR0FBRyxxQkFBUSw2QkFBQyx5QkFBRCxFQUFzQkMsS0FBdEIsQ0FBUixDQUFWO0FBQ0QsR0FkUyxDQUFWO0FBZ0JBWSxFQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QkMsSUFBQUEsTUFBTSxDQUFDZCxPQUFPLENBQUNlLElBQVIsQ0FBYUMseUJBQWIsRUFBK0JDLFdBQS9CLEVBQUQsQ0FBTjtBQUNELEdBRkMsQ0FBRjtBQUlBSixFQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QixRQUFNSyxJQUFJLEdBQUdDLDJCQUFTQyxNQUFULENBQWdCLDZCQUFDLHlCQUFELE9BQWhCLEVBQXNDQyxNQUF0QyxFQUFiOztBQUNBUCxJQUFBQSxNQUFNLENBQUNJLElBQUQsQ0FBTixDQUFhSSxlQUFiO0FBQ0QsR0FIQyxDQUFGO0FBS0FULEVBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxZQUFNO0FBQ3ZDQyxJQUFBQSxNQUFNLENBQUNkLE9BQU8sQ0FBQ2UsSUFBUixDQUFhUSw2QkFBYixDQUFELENBQU4sQ0FBMkNOLFdBQTNDO0FBQ0QsR0FGQyxDQUFGO0FBSUFKLEVBQUFBLEVBQUUsQ0FBQywrREFBRCxFQUFrRSxZQUFNO0FBTXhFQyxJQUFBQSxNQUFNLENBQUNkLE9BQU8sQ0FBQ2UsSUFBUixDQUFhUywwQkFBYixFQUEyQlAsV0FBM0IsRUFBRCxDQUFOO0FBQ0QsR0FQQyxDQUFGO0FBUUQsQ0F6Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBqZXN0IGZyb20gJ2plc3QtbW9jayc7XG5cbmltcG9ydCBSZXNlcnZhdGlvbnNMaXN0IGZyb20gJy4uL1Jlc2VydmF0aW9uc0xpc3QnO1xuaW1wb3J0IFJlc2VydmF0aW9uc0xpc3RJdGVtIGZyb20gJy4uL1Jlc2VydmF0aW9uc0xpc3RJdGVtJztcbmltcG9ydCBCdXR0b25BY3Rpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL0J1dHRvbkFjdGlvblJvdW5kJztcblxuLy8gTm90ZTogdGVzdCByZW5kZXJlciBtdXN0IGJlIHJlcXVpcmVkIGFmdGVyIHJlYWN0LW5hdGl2ZS5cbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuZGVzY3JpYmUoJzxSZXNlcnZhdGlvbnNMaXN0IC8+JywgKCkgPT4ge1xuICBsZXQgd3JhcHBlcjtcbiAgbGV0IHByb3BzO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb3BzID0ge1xuICAgICAgaG90ZWxzOiBbW3tcbiAgICAgICAgaG90ZWxOYW1lOiAndGVzdCcsXG4gICAgICAgIF9fdHlwZW5hbWU6ICdSZXNlcnZhdGlvbicsXG4gICAgICAgIGlkOiAnMTIzNDU2JyxcbiAgICAgICAgbmFtZTogJ0FuZHknLFxuICAgICAgICBhcnJpdmFsRGF0ZTogJzA0LzIyLzIwMjAnLFxuICAgICAgICBkZXBhcnR1cmVEYXRlOiAnMDQvMjIvOTk5OScsXG4gICAgICB9XV0sXG4gICAgICBzZXRTaG93U2NoZWR1bGVyOiBqZXN0LmZuKCksXG4gICAgfTtcblxuICAgIHdyYXBwZXIgPSBzaGFsbG93KDxSZXNlcnZhdGlvbnNMaXN0IHsuLi5wcm9wc30gLz4pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChSZXNlcnZhdGlvbnNMaXN0KS50b0JlRGVmaW5lZCgpKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoPFJlc2VydmF0aW9uc0xpc3QgLz4pLnRvSlNPTigpO1xuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgUmVzZXJ2YXRpb25zTGlzdEl0ZW0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChSZXNlcnZhdGlvbnNMaXN0SXRlbSkpLnRvQmVEZWZpbmVkKCk7XG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgYSBCdXR0b25BY3Rpb24gdG8gYWxsb3cgb3BlbmluZyBSZXNlcnZhdGlvbnNTY2hlZHVsZXInLCAoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkod3JhcHBlcikpO1xuICAgIC8vIGNvbnN0IHNldFNob3dTY2hlZHVsZXIgPSB3cmFwcGVyLnByb3BzKClbJ2NoaWxkcmVuJ11bMV0ucHJvcHMub25QcmVzcztcbiAgICAvLyBzZXRTaG93U2NoZWR1bGVyKCk7XG4gICAgLy8gZXhwZWN0KHNldFNob3dTY2hlZHVsZXIpLnRvQmVDYWxsZWQoKTtcbiAgICAvLyBjb25zb2xlLmxvZyh3cmFwcGVyLmZpbmQoQnV0dG9uQWN0aW9uKSk7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChCdXR0b25BY3Rpb24pLnRvQmVEZWZpbmVkKCkpO1xuICB9KTtcbn0pXG4iXX0=