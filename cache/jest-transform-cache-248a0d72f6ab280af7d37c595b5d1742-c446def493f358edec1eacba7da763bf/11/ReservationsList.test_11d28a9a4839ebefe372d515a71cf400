7d8c35d91f75f5b64596a79b0c779e37
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _jestMock = _interopRequireDefault(require("jest-mock"));

var _ReservationsList = _interopRequireDefault(require("../ReservationsList"));

var _ReservationsListItem = _interopRequireDefault(require("../ReservationsListItem"));

var _ButtonActionRound = _interopRequireDefault(require("../../../common/ButtonActionRound"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

describe('<ReservationsList />', function () {
  var wrapper;
  var props;
  beforeEach(function () {
    props = {
      hotels: [{
        hotelName: 'test',
        __typename: 'Reservation',
        id: '123456',
        name: 'Andy',
        arrivalDate: '04/22/2020',
        departureDate: '04/22/9999'
      }],
      setShowScheduler: _jestMock.default.fn()
    };
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_ReservationsList.default, null));
  });
  it('should be defined', function () {
    expect(_ReservationsList.default).toBeDefined();
  });
  it('renders correctly', function () {
    var tree = _reactTestRenderer.default.create(_react.default.createElement(_ReservationsList.default, null)).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('should have access to setShowScheduler() function', function () {
    console.log(JSON.stringify(wrapper));
    var setShowScheduler = wrapper.props()['children'][1].props.onPress;
    setShowScheduler();
    expect(setShowScheduler).toBeCalled;
    console.log(wrapper.find(_ButtonActionRound.default));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlc2VydmF0aW9uc0xpc3QudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIndyYXBwZXIiLCJwcm9wcyIsImJlZm9yZUVhY2giLCJob3RlbHMiLCJob3RlbE5hbWUiLCJfX3R5cGVuYW1lIiwiaWQiLCJuYW1lIiwiYXJyaXZhbERhdGUiLCJkZXBhcnR1cmVEYXRlIiwic2V0U2hvd1NjaGVkdWxlciIsImplc3QiLCJmbiIsIml0IiwiZXhwZWN0IiwiUmVzZXJ2YXRpb25zTGlzdCIsInRvQmVEZWZpbmVkIiwidHJlZSIsInJlbmRlcmVyIiwiY3JlYXRlIiwidG9KU09OIiwidG9NYXRjaFNuYXBzaG90IiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJvblByZXNzIiwidG9CZUNhbGxlZCIsImZpbmQiLCJCdXR0b25BY3Rpb24iXSwibWFwcGluZ3MiOiI7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBRUFBLFFBQVEsQ0FBQyxzQkFBRCxFQUF5QixZQUFNO0FBQ3JDLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxLQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZELElBQUFBLEtBQUssR0FBRztBQUNORSxNQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNQQyxRQUFBQSxTQUFTLEVBQUUsTUFESjtBQUVQQyxRQUFBQSxVQUFVLEVBQUUsYUFGTDtBQUdQQyxRQUFBQSxFQUFFLEVBQUUsUUFIRztBQUlQQyxRQUFBQSxJQUFJLEVBQUUsTUFKQztBQUtQQyxRQUFBQSxXQUFXLEVBQUUsWUFMTjtBQU1QQyxRQUFBQSxhQUFhLEVBQUU7QUFOUixPQUFELENBREY7QUFTTkMsTUFBQUEsZ0JBQWdCLEVBQUVDLGtCQUFLQyxFQUFMO0FBVFosS0FBUjtBQVlBWixJQUFBQSxPQUFPLEdBQUcscUJBQVEsNkJBQUMseUJBQUQsT0FBUixDQUFWO0FBQ0QsR0FkUyxDQUFWO0FBZ0JBYSxFQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QkMsSUFBQUEsTUFBTSxDQUFDQyx5QkFBRCxDQUFOLENBQXlCQyxXQUF6QjtBQUNELEdBRkMsQ0FBRjtBQUlBSCxFQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QixRQUFNSSxJQUFJLEdBQUdDLDJCQUFTQyxNQUFULENBQWdCLDZCQUFDLHlCQUFELE9BQWhCLEVBQXNDQyxNQUF0QyxFQUFiOztBQUNBTixJQUFBQSxNQUFNLENBQUNHLElBQUQsQ0FBTixDQUFhSSxlQUFiO0FBQ0QsR0FIQyxDQUFGO0FBU0FSLEVBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFNO0FBQzVEUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBSSxDQUFDQyxTQUFMLENBQWV6QixPQUFmLENBQVo7QUFDQSxRQUFNVSxnQkFBZ0IsR0FBR1YsT0FBTyxDQUFDQyxLQUFSLEdBQWdCLFVBQWhCLEVBQTRCLENBQTVCLEVBQStCQSxLQUEvQixDQUFxQ3lCLE9BQTlEO0FBQ0FoQixJQUFBQSxnQkFBZ0I7QUFDaEJJLElBQUFBLE1BQU0sQ0FBQ0osZ0JBQUQsQ0FBTixDQUF5QmlCLFVBQXpCO0FBQ0FMLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZdkIsT0FBTyxDQUFDNEIsSUFBUixDQUFhQywwQkFBYixDQUFaO0FBQ0QsR0FOQyxDQUFGO0FBT0QsQ0F4Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBqZXN0IGZyb20gJ2plc3QtbW9jayc7XG5cbmltcG9ydCBSZXNlcnZhdGlvbnNMaXN0IGZyb20gJy4uL1Jlc2VydmF0aW9uc0xpc3QnO1xuaW1wb3J0IFJlc2VydmF0aW9uc0xpc3RJdGVtIGZyb20gJy4uL1Jlc2VydmF0aW9uc0xpc3RJdGVtJztcbmltcG9ydCBCdXR0b25BY3Rpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL0J1dHRvbkFjdGlvblJvdW5kJztcblxuLy8gTm90ZTogdGVzdCByZW5kZXJlciBtdXN0IGJlIHJlcXVpcmVkIGFmdGVyIHJlYWN0LW5hdGl2ZS5cbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuZGVzY3JpYmUoJzxSZXNlcnZhdGlvbnNMaXN0IC8+JywgKCkgPT4ge1xuICBsZXQgd3JhcHBlcjtcbiAgbGV0IHByb3BzO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb3BzID0ge1xuICAgICAgaG90ZWxzOiBbe1xuICAgICAgICBob3RlbE5hbWU6ICd0ZXN0JyxcbiAgICAgICAgX190eXBlbmFtZTogJ1Jlc2VydmF0aW9uJyxcbiAgICAgICAgaWQ6ICcxMjM0NTYnLFxuICAgICAgICBuYW1lOiAnQW5keScsXG4gICAgICAgIGFycml2YWxEYXRlOiAnMDQvMjIvMjAyMCcsXG4gICAgICAgIGRlcGFydHVyZURhdGU6ICcwNC8yMi85OTk5JyxcbiAgICAgIH1dLFxuICAgICAgc2V0U2hvd1NjaGVkdWxlcjogamVzdC5mbigpLFxuICAgIH07XG5cbiAgICB3cmFwcGVyID0gc2hhbGxvdyg8UmVzZXJ2YXRpb25zTGlzdCAvPik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3QoUmVzZXJ2YXRpb25zTGlzdCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoPFJlc2VydmF0aW9uc0xpc3QgLz4pLnRvSlNPTigpO1xuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgLy8gaXQoJ3JlbmRlcnMgUmVzZXJ2YXRpb25zTGlzdEl0ZW0nLCAoKSA9PiB7XG4gIC8vICAgZXhwZWN0KHdyYXBwZXIuZmluZChSZXNlcnZhdGlvbnNMaXN0aXRlbSkpLnRvQmVEZWZpbmVkKCk7XG4gIC8vIH0pXG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGFjY2VzcyB0byBzZXRTaG93U2NoZWR1bGVyKCkgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkod3JhcHBlcikpO1xuICAgIGNvbnN0IHNldFNob3dTY2hlZHVsZXIgPSB3cmFwcGVyLnByb3BzKClbJ2NoaWxkcmVuJ11bMV0ucHJvcHMub25QcmVzcztcbiAgICBzZXRTaG93U2NoZWR1bGVyKCk7XG4gICAgZXhwZWN0KHNldFNob3dTY2hlZHVsZXIpLnRvQmVDYWxsZWRcbiAgICBjb25zb2xlLmxvZyh3cmFwcGVyLmZpbmQoQnV0dG9uQWN0aW9uKSk7XG4gIH0pO1xufSlcbiJdfQ==