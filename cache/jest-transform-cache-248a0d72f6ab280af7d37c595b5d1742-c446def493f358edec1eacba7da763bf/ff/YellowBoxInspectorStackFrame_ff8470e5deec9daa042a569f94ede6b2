896ca223f8d5aa8ee4727910d9765126
'use strict';

var React = require('React');

var StyleSheet = require('StyleSheet');

var Text = require('Text');

var YellowBoxPressable = require('YellowBoxPressable');

var YellowBoxStyle = require('YellowBoxStyle');

var YellowBoxInspectorStackFrame = function YellowBoxInspectorStackFrame(props) {
  var frame = props.frame,
      onPress = props.onPress;
  return React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: YellowBoxStyle.getBackgroundColor(0),
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: onPress,
    style: styles.frame
  }, React.createElement(Text, {
    style: styles.frameName
  }, frame.methodName), React.createElement(Text, {
    ellipsizeMode: "middle",
    numberOfLines: 1,
    style: styles.frameLocation
  }, getFrameLocation(frame.file) + ":" + frame.lineNumber + (frame.column == null ? '' : ':' + frame.column)));
};

var getFrameLocation = function getFrameLocation(uri) {
  var queryIndex = uri.indexOf('?');
  var query = queryIndex < 0 ? '' : uri.substr(queryIndex);
  var path = queryIndex < 0 ? uri : uri.substr(0, queryIndex);
  var file = path.substr(path.lastIndexOf('/') + 1);
  return file + query;
};

var styles = StyleSheet.create({
  frame: {
    paddingHorizontal: 12,
    paddingVertical: 4
  },
  frameName: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18
  },
  frameLocation: {
    color: YellowBoxStyle.getTextColor(0.7),
    fontSize: 12,
    fontWeight: '300',
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorStackFrame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiU3R5bGVTaGVldCIsIlRleHQiLCJZZWxsb3dCb3hQcmVzc2FibGUiLCJZZWxsb3dCb3hTdHlsZSIsIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUiLCJwcm9wcyIsImZyYW1lIiwib25QcmVzcyIsImRlZmF1bHQiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJwcmVzc2VkIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJzdHlsZXMiLCJmcmFtZU5hbWUiLCJtZXRob2ROYW1lIiwiZnJhbWVMb2NhdGlvbiIsImdldEZyYW1lTG9jYXRpb24iLCJmaWxlIiwibGluZU51bWJlciIsImNvbHVtbiIsInVyaSIsInF1ZXJ5SW5kZXgiLCJpbmRleE9mIiwicXVlcnkiLCJzdWJzdHIiLCJwYXRoIiwibGFzdEluZGV4T2YiLCJjcmVhdGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsImNvbG9yIiwiZ2V0VGV4dENvbG9yIiwiZm9udFNpemUiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxJQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1HLGtCQUFrQixHQUFHSCxPQUFPLENBQUMsb0JBQUQsQ0FBbEM7O0FBQ0EsSUFBTUksY0FBYyxHQUFHSixPQUFPLENBQUMsZ0JBQUQsQ0FBOUI7O0FBVUEsSUFBTUssNEJBQTRCLEdBQUcsU0FBL0JBLDRCQUErQixDQUFDQyxLQUFELEVBQThCO0FBQUEsTUFDMURDLEtBRDBELEdBQ3hDRCxLQUR3QyxDQUMxREMsS0FEMEQ7QUFBQSxNQUNuREMsT0FEbUQsR0FDeENGLEtBRHdDLENBQ25ERSxPQURtRDtBQUdqRSxTQUNFLG9CQUFDLGtCQUFEO0FBQ0UsSUFBQSxlQUFlLEVBQUU7QUFDZkMsTUFBQUEsT0FBTyxFQUFFTCxjQUFjLENBQUNNLGtCQUFmLENBQWtDLENBQWxDLENBRE07QUFFZkMsTUFBQUEsT0FBTyxFQUFFUCxjQUFjLENBQUNRLGlCQUFmLENBQWlDLENBQWpDO0FBRk0sS0FEbkI7QUFLRSxJQUFBLE9BQU8sRUFBRUosT0FMWDtBQU1FLElBQUEsS0FBSyxFQUFFSyxNQUFNLENBQUNOO0FBTmhCLEtBT0Usb0JBQUMsSUFBRDtBQUFNLElBQUEsS0FBSyxFQUFFTSxNQUFNLENBQUNDO0FBQXBCLEtBQWdDUCxLQUFLLENBQUNRLFVBQXRDLENBUEYsRUFRRSxvQkFBQyxJQUFEO0FBQ0UsSUFBQSxhQUFhLEVBQUMsUUFEaEI7QUFFRSxJQUFBLGFBQWEsRUFBRSxDQUZqQjtBQUdFLElBQUEsS0FBSyxFQUFFRixNQUFNLENBQUNHO0FBSGhCLEtBSU1DLGdCQUFnQixDQUFDVixLQUFLLENBQUNXLElBQVAsQ0FKdEIsU0FJc0NYLEtBQUssQ0FBQ1ksVUFKNUMsSUFLSVosS0FBSyxDQUFDYSxNQUFOLElBQWdCLElBQWhCLEdBQXVCLEVBQXZCLEdBQTRCLE1BQU1iLEtBQUssQ0FBQ2EsTUFMNUMsRUFSRixDQURGO0FBbUJELENBdEJEOztBQXdCQSxJQUFNSCxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUNJLEdBQUQsRUFBeUI7QUFDaEQsTUFBTUMsVUFBVSxHQUFHRCxHQUFHLENBQUNFLE9BQUosQ0FBWSxHQUFaLENBQW5CO0FBQ0EsTUFBTUMsS0FBSyxHQUFHRixVQUFVLEdBQUcsQ0FBYixHQUFpQixFQUFqQixHQUFzQkQsR0FBRyxDQUFDSSxNQUFKLENBQVdILFVBQVgsQ0FBcEM7QUFFQSxNQUFNSSxJQUFJLEdBQUdKLFVBQVUsR0FBRyxDQUFiLEdBQWlCRCxHQUFqQixHQUF1QkEsR0FBRyxDQUFDSSxNQUFKLENBQVcsQ0FBWCxFQUFjSCxVQUFkLENBQXBDO0FBQ0EsTUFBTUosSUFBSSxHQUFHUSxJQUFJLENBQUNELE1BQUwsQ0FBWUMsSUFBSSxDQUFDQyxXQUFMLENBQWlCLEdBQWpCLElBQXdCLENBQXBDLENBQWI7QUFFQSxTQUFPVCxJQUFJLEdBQUdNLEtBQWQ7QUFDRCxDQVJEOztBQVVBLElBQU1YLE1BQU0sR0FBR1osVUFBVSxDQUFDMkIsTUFBWCxDQUFrQjtBQUMvQnJCLEVBQUFBLEtBQUssRUFBRTtBQUNMc0IsSUFBQUEsaUJBQWlCLEVBQUUsRUFEZDtBQUVMQyxJQUFBQSxlQUFlLEVBQUU7QUFGWixHQUR3QjtBQUsvQmhCLEVBQUFBLFNBQVMsRUFBRTtBQUNUaUIsSUFBQUEsS0FBSyxFQUFFM0IsY0FBYyxDQUFDNEIsWUFBZixDQUE0QixDQUE1QixDQURFO0FBRVRDLElBQUFBLFFBQVEsRUFBRSxFQUZEO0FBR1RDLElBQUFBLGtCQUFrQixFQUFFLEtBSFg7QUFJVEMsSUFBQUEsVUFBVSxFQUFFO0FBSkgsR0FMb0I7QUFXL0JuQixFQUFBQSxhQUFhLEVBQUU7QUFDYmUsSUFBQUEsS0FBSyxFQUFFM0IsY0FBYyxDQUFDNEIsWUFBZixDQUE0QixHQUE1QixDQURNO0FBRWJDLElBQUFBLFFBQVEsRUFBRSxFQUZHO0FBR2JHLElBQUFBLFVBQVUsRUFBRSxLQUhDO0FBSWJGLElBQUFBLGtCQUFrQixFQUFFLEtBSlA7QUFLYkMsSUFBQUEsVUFBVSxFQUFFO0FBTEM7QUFYZ0IsQ0FBbEIsQ0FBZjtBQW9CQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsNEJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgnUmVhY3QnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCdTdHlsZVNoZWV0Jyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnVGV4dCcpO1xuY29uc3QgWWVsbG93Qm94UHJlc3NhYmxlID0gcmVxdWlyZSgnWWVsbG93Qm94UHJlc3NhYmxlJyk7XG5jb25zdCBZZWxsb3dCb3hTdHlsZSA9IHJlcXVpcmUoJ1llbGxvd0JveFN0eWxlJyk7XG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICdDb3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAncGFyc2VFcnJvclN0YWNrJztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICBmcmFtZTogU3RhY2tGcmFtZSxcbiAgb25QcmVzcz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG58fT47XG5cbmNvbnN0IFllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUgPSAocHJvcHM6IFByb3BzKTogUmVhY3QuTm9kZSA9PiB7XG4gIGNvbnN0IHtmcmFtZSwgb25QcmVzc30gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxZZWxsb3dCb3hQcmVzc2FibGVcbiAgICAgIGJhY2tncm91bmRDb2xvcj17e1xuICAgICAgICBkZWZhdWx0OiBZZWxsb3dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMCksXG4gICAgICAgIHByZXNzZWQ6IFllbGxvd0JveFN0eWxlLmdldEhpZ2hsaWdodENvbG9yKDEpLFxuICAgICAgfX1cbiAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICBzdHlsZT17c3R5bGVzLmZyYW1lfT5cbiAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZnJhbWVOYW1lfT57ZnJhbWUubWV0aG9kTmFtZX08L1RleHQ+XG4gICAgICA8VGV4dFxuICAgICAgICBlbGxpcHNpemVNb2RlPVwibWlkZGxlXCJcbiAgICAgICAgbnVtYmVyT2ZMaW5lcz17MX1cbiAgICAgICAgc3R5bGU9e3N0eWxlcy5mcmFtZUxvY2F0aW9ufT5cbiAgICAgICAge2Ake2dldEZyYW1lTG9jYXRpb24oZnJhbWUuZmlsZSl9OiR7ZnJhbWUubGluZU51bWJlcn0ke1xuICAgICAgICAgIGZyYW1lLmNvbHVtbiA9PSBudWxsID8gJycgOiAnOicgKyBmcmFtZS5jb2x1bW5cbiAgICAgICAgfWB9XG4gICAgICA8L1RleHQ+XG4gICAgPC9ZZWxsb3dCb3hQcmVzc2FibGU+XG4gICk7XG59O1xuXG5jb25zdCBnZXRGcmFtZUxvY2F0aW9uID0gKHVyaTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgcXVlcnlJbmRleCA9IHVyaS5pbmRleE9mKCc/Jyk7XG4gIGNvbnN0IHF1ZXJ5ID0gcXVlcnlJbmRleCA8IDAgPyAnJyA6IHVyaS5zdWJzdHIocXVlcnlJbmRleCk7XG5cbiAgY29uc3QgcGF0aCA9IHF1ZXJ5SW5kZXggPCAwID8gdXJpIDogdXJpLnN1YnN0cigwLCBxdWVyeUluZGV4KTtcbiAgY29uc3QgZmlsZSA9IHBhdGguc3Vic3RyKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXG4gIHJldHVybiBmaWxlICsgcXVlcnk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGZyYW1lOiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogNCxcbiAgfSxcbiAgZnJhbWVOYW1lOiB7XG4gICAgY29sb3I6IFllbGxvd0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgaW5jbHVkZUZvbnRQYWRkaW5nOiBmYWxzZSxcbiAgICBsaW5lSGVpZ2h0OiAxOCxcbiAgfSxcbiAgZnJhbWVMb2NhdGlvbjoge1xuICAgIGNvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMC43KSxcbiAgICBmb250U2l6ZTogMTIsXG4gICAgZm9udFdlaWdodDogJzMwMCcsXG4gICAgaW5jbHVkZUZvbnRQYWRkaW5nOiBmYWxzZSxcbiAgICBsaW5lSGVpZ2h0OiAxNixcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWU7XG4iXX0=