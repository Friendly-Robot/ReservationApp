e2f7254a5040a406ef223cfdf98bb50f
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var React = require('React');

var Text = require('Text');

var UTFSequence = require('UTFSequence');

var stringifySafe = require('stringifySafe');

var SUBSTITUTION = UTFSequence.BOM + '%s';
var YellowBoxCategory = {
  parse: function parse(args) {
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = (0, _toConsumableArray2.default)(args);

    if (typeof remaining[0] === 'string') {
      var formatString = String(remaining.shift());
      var formatStringParts = formatString.split('%s');
      var substitutionCount = formatStringParts.length - 1;
      var substitutions = remaining.splice(0, substitutionCount);
      var categoryString = '';
      var contentString = '';
      var substitutionIndex = 0;

      for (var _iterator = formatStringParts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var _formatStringPart = _ref;
        categoryString += _formatStringPart;
        contentString += _formatStringPart;

        if (substitutionIndex < substitutionCount) {
          if (substitutionIndex < substitutions.length) {
            var substitution = stringifySafe(substitutions[substitutionIndex]);
            substitutionOffsets.push({
              length: substitution.length,
              offset: contentString.length
            });
            categoryString += SUBSTITUTION;
            contentString += substitution;
          } else {
            substitutionOffsets.push({
              length: 2,
              offset: contentString.length
            });
            categoryString += '%s';
            contentString += '%s';
          }

          substitutionIndex++;
        }
      }

      categoryParts.push(categoryString);
      contentParts.push(contentString);
    }

    var remainingArgs = remaining.map(stringifySafe);
    categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));
    contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));
    return {
      category: categoryParts.join(' '),
      message: {
        content: contentParts.join(' '),
        substitutions: substitutionOffsets
      }
    };
  },
  render: function render(_ref2, substitutionStyle) {
    var content = _ref2.content,
        substitutions = _ref2.substitutions;
    var elements = [];
    var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
      var key = String(index);

      if (substitution.offset > prevOffset) {
        var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);
        elements.push(React.createElement(Text, {
          key: key
        }, prevPart));
      }

      var substititionPart = content.substr(substitution.offset, substitution.length);
      elements.push(React.createElement(Text, {
        key: key + '.5',
        style: substitutionStyle
      }, substititionPart));
      return substitution.offset + substitution.length;
    }, 0);

    if (lastOffset < content.length) {
      var lastPart = content.substr(lastOffset);
      elements.push(React.createElement(Text, {
        key: "-1"
      }, lastPart));
    }

    return elements;
  }
};
module.exports = YellowBoxCategory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveENhdGVnb3J5LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRleHQiLCJVVEZTZXF1ZW5jZSIsInN0cmluZ2lmeVNhZmUiLCJTVUJTVElUVVRJT04iLCJCT00iLCJZZWxsb3dCb3hDYXRlZ29yeSIsInBhcnNlIiwiYXJncyIsImNhdGVnb3J5UGFydHMiLCJjb250ZW50UGFydHMiLCJzdWJzdGl0dXRpb25PZmZzZXRzIiwicmVtYWluaW5nIiwiZm9ybWF0U3RyaW5nIiwiU3RyaW5nIiwic2hpZnQiLCJmb3JtYXRTdHJpbmdQYXJ0cyIsInNwbGl0Iiwic3Vic3RpdHV0aW9uQ291bnQiLCJsZW5ndGgiLCJzdWJzdGl0dXRpb25zIiwic3BsaWNlIiwiY2F0ZWdvcnlTdHJpbmciLCJjb250ZW50U3RyaW5nIiwic3Vic3RpdHV0aW9uSW5kZXgiLCJmb3JtYXRTdHJpbmdQYXJ0Iiwic3Vic3RpdHV0aW9uIiwicHVzaCIsIm9mZnNldCIsInJlbWFpbmluZ0FyZ3MiLCJtYXAiLCJjYXRlZ29yeSIsImpvaW4iLCJtZXNzYWdlIiwiY29udGVudCIsInJlbmRlciIsInN1YnN0aXR1dGlvblN0eWxlIiwiZWxlbWVudHMiLCJsYXN0T2Zmc2V0IiwicmVkdWNlIiwicHJldk9mZnNldCIsImluZGV4Iiwia2V5IiwicHJldlBhcnQiLCJzdWJzdHIiLCJzdWJzdGl0aXRpb25QYXJ0IiwibGFzdFBhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBRUEsSUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1FLFdBQVcsR0FBR0YsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBRUEsSUFBTUcsYUFBYSxHQUFHSCxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFlQSxJQUFNSSxZQUFZLEdBQUdGLFdBQVcsQ0FBQ0cs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QUFBTSxRQUFBLEdBQUcsRUFBQztBQUFWLFNBQWdCbUIsUUFBaEIsQ0FBZDtBQUNEOztBQUVELFdBQU9ULFFBQVA7QUFDRDtBQTdHdUIsQ0FBMUI7QUFnSEFVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFDLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnVGV4dCcpO1xuY29uc3QgVVRGU2VxdWVuY2UgPSByZXF1aXJlKCdVVEZTZXF1ZW5jZScpO1xuXG5jb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnc3RyaW5naWZ5U2FmZScpO1xuXG5pbXBvcnQgdHlwZSB7VGV4dFN0eWxlUHJvcH0gZnJvbSAnU3R5bGVTaGVldCc7XG5cbmV4cG9ydCB0eXBlIENhdGVnb3J5ID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgTWVzc2FnZSA9ICRSZWFkT25seTx7fFxuICBjb250ZW50OiBzdHJpbmcsXG4gIHN1YnN0aXR1dGlvbnM6ICRSZWFkT25seUFycmF5PFxuICAgICRSZWFkT25seTx7fFxuICAgICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgICBvZmZzZXQ6IG51bWJlcixcbiAgICB8fT4sXG4gID4sXG58fT47XG5cbmNvbnN0IFNVQlNUSVRVVElPTiA9IFVURlNlcXVlbmNlLkJPTSArICclcyc7XG5cbmNvbnN0IFllbGxvd0JveENhdGVnb3J5ID0ge1xuICBwYXJzZShcbiAgICBhcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sXG4gICk6ICRSZWFkT25seTx7fFxuICAgIGNhdGVnb3J5OiBDYXRlZ29yeSxcbiAgICBtZXNzYWdlOiBNZXNzYWdlLFxuICB8fT4ge1xuICAgIGNvbnN0IGNhdGVnb3J5UGFydHMgPSBbXTtcbiAgICBjb25zdCBjb250ZW50UGFydHMgPSBbXTtcbiAgICBjb25zdCBzdWJzdGl0dXRpb25PZmZzZXRzID0gW107XG5cbiAgICBjb25zdCByZW1haW5pbmcgPSBbLi4uYXJnc107XG5cbiAgICBpZiAodHlwZW9mIHJlbWFpbmluZ1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGZvcm1hdFN0cmluZyA9IFN0cmluZyhyZW1haW5pbmcuc2hpZnQoKSk7XG4gICAgICBjb25zdCBmb3JtYXRTdHJpbmdQYXJ0cyA9IGZvcm1hdFN0cmluZy5zcGxpdCgnJXMnKTtcbiAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbkNvdW50ID0gZm9ybWF0U3RyaW5nUGFydHMubGVuZ3RoIC0gMTtcbiAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbnMgPSByZW1haW5pbmcuc3BsaWNlKDAsIHN1YnN0aXR1dGlvbkNvdW50KTtcblxuICAgICAgbGV0IGNhdGVnb3J5U3RyaW5nID0gJyc7XG4gICAgICBsZXQgY29udGVudFN0cmluZyA9ICcnO1xuXG4gICAgICBsZXQgc3Vic3RpdHV0aW9uSW5kZXggPSAwO1xuICAgICAgZm9yIChjb25zdCBmb3JtYXRTdHJpbmdQYXJ0IG9mIGZvcm1hdFN0cmluZ1BhcnRzKSB7XG4gICAgICAgIGNhdGVnb3J5U3RyaW5nICs9IGZvcm1hdFN0cmluZ1BhcnQ7XG4gICAgICAgIGNvbnRlbnRTdHJpbmcgKz0gZm9ybWF0U3RyaW5nUGFydDtcblxuICAgICAgICBpZiAoc3Vic3RpdHV0aW9uSW5kZXggPCBzdWJzdGl0dXRpb25Db3VudCkge1xuICAgICAgICAgIGlmIChzdWJzdGl0dXRpb25JbmRleCA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzdGl0dXRpb24gPSBzdHJpbmdpZnlTYWZlKFxuICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zW3N1YnN0aXR1dGlvbkluZGV4XSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzdWJzdGl0dXRpb25PZmZzZXRzLnB1c2goe1xuICAgICAgICAgICAgICBsZW5ndGg6IHN1YnN0aXR1dGlvbi5sZW5ndGgsXG4gICAgICAgICAgICAgIG9mZnNldDogY29udGVudFN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2F0ZWdvcnlTdHJpbmcgKz0gU1VCU1RJVFVUSU9OO1xuICAgICAgICAgICAgY29udGVudFN0cmluZyArPSBzdWJzdGl0dXRpb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnN0aXR1dGlvbk9mZnNldHMucHVzaCh7XG4gICAgICAgICAgICAgIGxlbmd0aDogMixcbiAgICAgICAgICAgICAgb2Zmc2V0OiBjb250ZW50U3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYXRlZ29yeVN0cmluZyArPSAnJXMnO1xuICAgICAgICAgICAgY29udGVudFN0cmluZyArPSAnJXMnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN1YnN0aXR1dGlvbkluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2F0ZWdvcnlQYXJ0cy5wdXNoKGNhdGVnb3J5U3RyaW5nKTtcbiAgICAgIGNvbnRlbnRQYXJ0cy5wdXNoKGNvbnRlbnRTdHJpbmcpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbWFpbmluZ0FyZ3MgPSByZW1haW5pbmcubWFwKHN0cmluZ2lmeVNhZmUpO1xuICAgIGNhdGVnb3J5UGFydHMucHVzaCguLi5yZW1haW5pbmdBcmdzKTtcbiAgICBjb250ZW50UGFydHMucHVzaCguLi5yZW1haW5pbmdBcmdzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjYXRlZ29yeTogY2F0ZWdvcnlQYXJ0cy5qb2luKCcgJyksXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRQYXJ0cy5qb2luKCcgJyksXG4gICAgICAgIHN1YnN0aXR1dGlvbnM6IHN1YnN0aXR1dGlvbk9mZnNldHMsXG4gICAgICB9LFxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyKFxuICAgIHtjb250ZW50LCBzdWJzdGl0dXRpb25zfTogTWVzc2FnZSxcbiAgICBzdWJzdGl0dXRpb25TdHlsZTogVGV4dFN0eWxlUHJvcCxcbiAgKTogUmVhY3QuTm9kZSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICAgIGNvbnN0IGxhc3RPZmZzZXQgPSBzdWJzdGl0dXRpb25zLnJlZHVjZShcbiAgICAgIChwcmV2T2Zmc2V0LCBzdWJzdGl0dXRpb24sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyhpbmRleCk7XG5cbiAgICAgICAgaWYgKHN1YnN0aXR1dGlvbi5vZmZzZXQgPiBwcmV2T2Zmc2V0KSB7XG4gICAgICAgICAgY29uc3QgcHJldlBhcnQgPSBjb250ZW50LnN1YnN0cihcbiAgICAgICAgICAgIHByZXZPZmZzZXQsXG4gICAgICAgICAgICBzdWJzdGl0dXRpb24ub2Zmc2V0IC0gcHJldk9mZnNldCxcbiAgICAgICAgICApO1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goPFRleHQga2V5PXtrZXl9PntwcmV2UGFydH08L1RleHQ+KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1YnN0aXRpdGlvblBhcnQgPSBjb250ZW50LnN1YnN0cihcbiAgICAgICAgICBzdWJzdGl0dXRpb24ub2Zmc2V0LFxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5sZW5ndGgsXG4gICAgICAgICk7XG4gICAgICAgIGVsZW1lbnRzLnB1c2goXG4gICAgICAgICAgPFRleHQga2V5PXtrZXkgKyAnLjUnfSBzdHlsZT17c3Vic3RpdHV0aW9uU3R5bGV9PlxuICAgICAgICAgICAge3N1YnN0aXRpdGlvblBhcnR9XG4gICAgICAgICAgPC9UZXh0PixcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLm9mZnNldCArIHN1YnN0aXR1dGlvbi5sZW5ndGg7XG4gICAgICB9LFxuICAgICAgMCxcbiAgICApO1xuXG4gICAgaWYgKGxhc3RPZmZzZXQgPCBjb250ZW50Lmxlbmd0aCkge1xuICAgICAgY29uc3QgbGFzdFBhcnQgPSBjb250ZW50LnN1YnN0cihsYXN0T2Zmc2V0KTtcbiAgICAgIGVsZW1lbnRzLnB1c2goPFRleHQga2V5PVwiLTFcIj57bGFzdFBhcnR9PC9UZXh0Pik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hDYXRlZ29yeTtcbiJdfQ==