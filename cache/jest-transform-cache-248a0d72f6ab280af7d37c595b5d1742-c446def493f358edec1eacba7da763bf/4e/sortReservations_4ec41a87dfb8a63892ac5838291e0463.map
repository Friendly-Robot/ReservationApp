{"version":3,"sources":["sortReservations.js"],"names":["SortReservations","sort","reservations","setReservations","groupByHotel","forEach","res","__typename","reservation","hotelName","i","currLength","length","console","log","isFirstDateEarlier","arrivalDate","splice","push","hotels","Object","keys","result","map","hotel","firstDate","secondDate","splitFirstDate","split","splitSecondDate","parseInt","sortReservations"],"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","sourcesContent":["interface sortInterface {\n  sort(reservations: Array<T>, setReservations: Function): Array<T>;\n}\n\nclass SortReservations {\n  sort = (reservations = [], setReservations = () => {}) => {\n    const groupByHotel = {};\n    reservations.forEach((res) => {\n      if (res.__typename !== 'Reservation') return;\n      const reservation = {...res};\n      const { hotelName } = res;\n      if (!groupByHotel[hotelName]) {\n        groupByHotel[hotelName] = [reservation];\n      } else {\n        let i = 0;\n        const currLength = groupByHotel[hotelName].length;\n        console.log('hello');\n        while (i < currLength) {\n          if (this.isFirstDateEarlier(res.arrivalDate, groupByHotel[hotelName][i].arrivalDate)) {\n            groupByHotel[hotelName].splice(i, reservation);\n            return;\n          }\n          i++;\n        }\n        groupByHotel[hotelName].push(reservation);\n      }\n    });\n\n    const hotels = Object.keys(groupByHotel);\n    const result = hotels.map(hotel => groupByHotel[hotel])\n    setReservations(result);\n  }\n\n  isFirstDateEarlier = (firstDate: string, secondDate: string) => {\n    const splitFirstDate = firstDate.split('/');\n    const splitSecondDate = secondDate.split('/');\n    if (parseInt(splitFirstDate[2], 10) < parseInt(splitSecondDate[2], 10)) return true;\n    if (parseInt(splitFirstDate[0], 10) < parseInt(splitSecondDate[0], 10)) return true;\n    if (parseInt(splitFirstDate[0], 10) === parseInt(splitSecondDate[0], 10) &&\n      parseInt(splitFirstDate[1], 10) < parseInt(splitSecondDate[1], 10)) return true;\n    return false;\n  }\n}\n\nconst sortReservations: sortInterface = new SortReservations();\nexport default sortReservations.sort;"]}